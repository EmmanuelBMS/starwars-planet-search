{"version":3,"sources":["context/Context.js","components/Table.js","components/SearchBar.js","components/Filters.js","components/Sort.js","pages/Home.js","context/Provider.js","App.js","index.js"],"names":["Context","createContext","Table","useContext","planets","state","filters","name","filterByName","filterByNumericValues","order","columnSort","column","sort","handleFilter","filteredPlanets","sortPlanets","a","b","Intl","Collator","numeric","compare","handleSort","filter","planet","toLowerCase","includes","length","forEach","comparison","value","Number","className","map","key","data-testid","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","SearchBar","columnOptions","setFilters","useState","activeFilter","setActiveFilter","formFilter","setFormFilter","formHandleChange","target","n","useEffect","usedFilters","filteredColumns","usedFilter","filColumn","prevFilter","htmlFor","id","placeholder","onChange","onSubmit","event","preventDefault","columnOption","compOption","type","Filters","onClick","newFilter","removeFilter","Sort","formSort","setFormSort","handleChange","columnOpt","Home","Provider","children","isLoading","setState","fetch","response","json","results","fetchApi","completeState","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2436071.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst defaultValue = [];\n\nconst Context = createContext(defaultValue);\n\nexport default Context;\n","import React, { useContext } from 'react';\nimport Context from '../context/Context';\n\nfunction Table() {\n  const { state: { planets }, filters } = useContext(Context);\n  const { filterByName: { name }, filterByNumericValues, order } = filters;\n  const { column: columnSort, sort } = order;\n\n  const renderTableHeaders = () => (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Rotation Period</th>\n        <th>Orbital Period</th>\n        <th>Diameter</th>\n        <th>Climate</th>\n        <th>Gravity</th>\n        <th>Terrain</th>\n        <th>Surface Water</th>\n        <th>Population</th>\n        <th>Films</th>\n        <th>Created</th>\n        <th>Edited</th>\n        <th>URL</th>\n      </tr>\n    </thead>\n  );\n\n  const handleSort = () => {\n    const sortPlanets = [...planets];\n    if (sort === 'ASC') {\n      sortPlanets.sort(({ [columnSort]: a }, { [columnSort]: b }) => (\n        // sugestao retirada do Stackoverflow https://stackoverflow.com/questions/2802341/javascript-natural-sort-of-alphanumerical-strings\n        new Intl.Collator('en', { numeric: true }).compare(a, b)));\n    }\n    if (sort === 'DESC') {\n      sortPlanets.sort(({ [columnSort]: a }, { [columnSort]: b }) => (\n        // sugestao retirada do Stackoverflow https://stackoverflow.com/questions/2802341/javascript-natural-sort-of-alphanumerical-strings\n        new Intl.Collator('en', { numeric: true }).compare(b, a)));\n    }\n    return sortPlanets;\n  };\n\n  const handleFilter = () => {\n    // copia do estado, dado principio da imutabilidade, ou seja, nao modificar o array original\n    let filteredPlanets = handleSort();\n    if (name) {\n      filteredPlanets = filteredPlanets\n        .filter((planet) => planet.name.toLowerCase().includes(name.toLowerCase()));\n    }\n    if (filterByNumericValues.length > 0) {\n      // forEach porque e um array com mais de um filtro\n      filterByNumericValues.forEach((filter) => {\n        const { column, comparison, value } = filter;\n        // filteredPlanets recebe o proprio filtered planets filtrado por nome ou o proprios filtered planets copiado do context\n        filteredPlanets = filteredPlanets\n          .filter((planet) => {\n            switch (comparison) {\n            case 'maior que':\n              return Number(planet[column]) > Number(value);\n\n            case 'igual a':\n              return Number(planet[column]) === Number(value);\n\n            case 'menor que':\n              return Number(planet[column]) < Number(value);\n\n            default: return true;\n            }\n          });\n      });\n    }\n    return filteredPlanets;\n  };\n\n  const renderTableBody = () => (\n    // trecho de codigo retirado do Thalles Carneiro - Turma 12\n    // https://github.com/tryber/sd-012-project-starwars-planets-search/pull/107/commits/d6ceb78803965ab83793da3601d9b3c06fd73454\n    <tbody>\n      {handleFilter().map((planet) => (\n        <tr\n          key={ planet.name }\n        >\n          <td data-testid=\"planet-name\">{planet.name}</td>\n          <td>{planet.rotation_period}</td>\n          <td>{planet.orbital_period}</td>\n          <td>{planet.diameter}</td>\n          <td>{planet.climate}</td>\n          <td>{planet.gravity}</td>\n          <td>{planet.terrain}</td>\n          <td>{planet.surface_water}</td>\n          <td>{planet.population}</td>\n          <td>{planet.films}</td>\n          <td>{planet.created}</td>\n          <td>{planet.edited}</td>\n          <td>{planet.url}</td>\n        </tr>))}\n    </tbody>\n  );\n\n  return (\n    <div className=\"table-container\">\n      <table className=\"table\">\n        {renderTableHeaders()}\n        {renderTableBody()}\n      </table>\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useContext, useState, useEffect } from 'react';\nimport Context from '../context/Context';\n\nfunction SearchBar() {\n  const columnOptions = ['population', 'orbital_period',\n    'diameter', 'rotation_period', 'surface_water'];\n  const comparisonOptions = ['maior que', 'menor que', 'igual a'];\n  const { filters, setFilters } = useContext(Context);\n  const { filterByName: { name }, filterByNumericValues } = filters;\n  const [activeFilter, setActiveFilter] = useState(columnOptions);\n  const [formFilter, setFormFilter] = useState({\n    column: 'population',\n    comparison: 'maior que',\n    value: 0,\n  });\n\n  const handleChange = ({ target: { value } }) => {\n    setFilters({\n      ...filters,\n      filterByName: {\n        name: value,\n      },\n    });\n  };\n\n  const formHandleChange = ({ target: { name: n, value } }) => {\n    setFormFilter({ ...formFilter, [n]: value });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setFilters({\n      ...filters,\n      filterByNumericValues: [...filterByNumericValues, formFilter],\n    });\n  };\n\n  useEffect(() => {\n    const usedFilters = filterByNumericValues.map(({ column }) => column);\n    let filteredColumns = [...columnOptions];\n    usedFilters.forEach((usedFilter) => {\n      filteredColumns = filteredColumns\n        .filter((filColumn) => filColumn !== usedFilter);\n    });\n    setFormFilter((prevFilter) => ({\n      ...prevFilter, column: filteredColumns[0],\n    }));\n    setActiveFilter(filteredColumns);\n  }, [filterByNumericValues]);\n\n  return (\n    <div>\n      <label htmlFor=\"name-filter\">\n        Procurar\n        <input\n          id=\"name-filter\"\n          data-testid=\"name-filter\"\n          placeholder=\"Planet name\"\n          value={ name }\n          onChange={ handleChange }\n        />\n      </label>\n      <form onSubmit={ handleSubmit }>\n        <select\n          data-testid=\"column-filter\"\n          name=\"column\"\n          value={ formFilter.column }\n          onChange={ formHandleChange }\n        >\n          {activeFilter.map((columnOption) => (\n            <option key={ columnOption } value={ columnOption }>{columnOption}</option>))}\n        </select>\n        <select\n          data-testid=\"comparison-filter\"\n          name=\"comparison\"\n          onChange={ formHandleChange }\n          value={ formFilter.comparison }\n        >\n          {comparisonOptions.map((compOption) => (\n            <option key={ compOption } value={ compOption }>{compOption}</option>\n          ))}\n        </select>\n        <label htmlFor=\"population-filter\">\n          <input\n            id=\"population-filter\"\n            data-testid=\"value-filter\"\n            type=\"number\"\n            name=\"value\"\n            value={ formFilter.value }\n            onChange={ formHandleChange }\n          />\n        </label>\n        <button\n          data-testid=\"button-filter\"\n          type=\"submit\"\n        >\n          Filtrar\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React, { useContext } from 'react';\nimport Context from '../context/Context';\n\nfunction Filters() {\n  const { filters, setFilters } = useContext(Context);\n  const { filterByNumericValues } = filters;\n\n  const removeFilter = (filter) => {\n    const newFilter = filterByNumericValues\n      .filter(({ column }) => column !== filter.column);\n    setFilters({\n      ...filters,\n      filterByNumericValues: newFilter,\n    });\n  };\n\n  return (\n    <ul>\n      {filterByNumericValues.map((filter) => (\n        <li\n          key={ filter.column }\n          data-testid=\"filter\"\n        >\n          {`${filter.column} `}\n          {`${filter.comparison} `}\n          {`${filter.value}`}\n          <button\n            type=\"button\"\n            onClick={ () => removeFilter(filter) }\n          >\n            X\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default Filters;\n","import React, { useContext, useState } from 'react';\nimport Context from '../context/Context';\n\nfunction Sort() {\n  const { filters, setFilters } = useContext(Context);\n  const [formSort, setFormSort] = useState({\n    column: 'population',\n    sort: '',\n  });\n  const columnOptions = ['population', 'orbital_period',\n    'diameter', 'rotation_period', 'surface_water'];\n\n  const handleChange = ({ target: { name, value } }) => (\n    setFormSort({\n      ...formSort,\n      [name]: value,\n    })\n  );\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setFilters({\n      ...filters,\n      order: formSort,\n    });\n  };\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <label htmlFor=\"order\">\n        Order:\n        <select\n          data-testid=\"column-sort\"\n          id=\"order\"\n          name=\"column\"\n          onChange={ handleChange }\n          value={ formSort.column }\n        >\n          {columnOptions.map((columnOpt) => (\n            <option\n              key={ columnOpt }\n              value={ columnOpt }\n            >\n              {columnOpt}\n            </option>\n          ))}\n        </select>\n      </label>\n      <label htmlFor=\"asc\">\n        Ascendant\n        <input\n          id=\"asc\"\n          type=\"radio\"\n          name=\"sort\"\n          data-testid=\"column-sort-input-asc\"\n          value=\"ASC\"\n          onChange={ handleChange }\n        />\n      </label>\n      <label htmlFor=\"desc\">\n        Descendant\n        <input\n          id=\"desc\"\n          type=\"radio\"\n          name=\"sort\"\n          data-testid=\"column-sort-input-desc\"\n          value=\"DESC\"\n          onChange={ handleChange }\n        />\n      </label>\n      <button\n        data-testid=\"column-sort-button\"\n        type=\"submit\"\n      >\n        Order\n      </button>\n    </form>\n  );\n}\n\nexport default Sort;\n","import React from 'react';\nimport Table from '../components/Table';\nimport SearchBar from '../components/SearchBar';\nimport Filters from '../components/Filters';\nimport Sort from '../components/Sort';\n\nfunction Home() {\n  return (\n    <main className=\"app-container\">\n      <SearchBar />\n      <Sort />\n      <Filters />\n      <Table />\n    </main>\n  );\n}\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Context from './Context';\n\nfunction Provider({ children }) {\n  const [state, setState] = useState({ planets: [], isLoading: true });\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValues: [],\n    order: { column: 'name', sort: 'ASC' },\n  });\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      const response = await fetch('https://swapi-trybe.herokuapp.com/api/planets/');\n      const { results } = await response.json();\n      setState({ planets: results, isLoading: false });\n    };\n    fetchApi();\n  }, []);\n\n  const completeState = {\n    state,\n    setState,\n    filters,\n    setFilters,\n  };\n\n  return (\n    <Context.Provider value={ completeState }>\n      { children }\n    </Context.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n\nexport default Provider;\n","import React from 'react';\nimport Home from './pages/Home';\nimport Provider from './context/Provider';\n\nfunction App() {\n  return (\n    <Provider>\n      <Home />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}